name: Build

on:
  push:
    branches:
      - main
  release:
    types:
      - created

env:
  VERSION: ${{ (github.event.release.tag_name != '' && github.event.release.tag_name) || '0.0.0' }}
  IMAGE_NAME: aoirint/matvtoolpy
  IMAGE_VERSION_NAME: ${{ (github.event.release.tag_name != '' && github.event.release.tag_name) || 'latest' }}
  PYTHON_VERSION: '3.11.6'

jobs:
  deploy-docker:
    strategy:
      fail-fast: false
      matrix:
        include:
          -
            base_image: 'ubuntu:focal'
            base_runtime_image: 'ubuntu:focal'
            image_variant_name: 'ubuntu'
            sed: 'sed'
          -
            base_image: 'ubuntu:focal'
            base_runtime_image: 'nvcr.io/nvidia/driver:510-signed-ubuntu20.04'
            image_variant_name: 'nvidia'
            sed: 'sed'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Replace Version
        shell: bash
        run: |
          ${{ matrix.sed }} -i "s/__VERSION__ = \"0.0.0\"/__VERSION__ = \"${{ env.VERSION }}\"/" aoirint_matvtool/__init__.py
          ${{ matrix.sed }} -i "s/version = \"0.0.0\"/version = \"${{ env.VERSION }}\"/" pyproject.toml

      - name: Build and Deploy Docker image
        uses: docker/build-push-action@v3
        env:
          IMAGE_NAME_AND_TAG: ${{ format('{0}:{1}-{2}', env.IMAGE_NAME, matrix.image_variant_name, env.IMAGE_VERSION_NAME) }}
          LATEST_IMAGE_NAME_AND_TAG: ${{ format('{0}:{1}-{2}', env.IMAGE_NAME, matrix.image_variant_name, 'latest') }}
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_AND_TAG }}
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          target: runtime-env
          cache-from: |
            type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache
            type=registry,ref=${{ env.LATEST_IMAGE_NAME_AND_TAG }}-buildcache
          cache-to: |
            type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache,mode=max


  release-pypi:
    if: github.event.release.tag_name != ''

    strategy:
      fail-fast: false
      matrix:
        include:
          -
            os: 'ubuntu-20.04'
            sed: 'sed'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Poetry
        shell: bash
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install gsed for macOS
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew install gnu-sed

      - name: Replace Version
        shell: bash
        run: |
          ${{ matrix.sed }} -i "s/__VERSION__ = \"0.0.0\"/__VERSION__ = \"${{ env.VERSION }}\"/" aoirint_matvtool/__init__.py
          ${{ matrix.sed }} -i "s/version = \"0.0.0\"/version = \"${{ env.VERSION }}\"/" pyproject.toml

      - name: Install Dependencies
        shell: bash
        run: poetry install

      - name: Build and publish Package
        shell: bash
        run: poetry publish --build --username "__token__" --password "${{ secrets.PYPI_API_TOKEN }}"

  release-binary:
    if: github.event.release.tag_name != ''

    strategy:
      fail-fast: false
      matrix:
        include:
          -
            os: 'ubuntu-20.04'
            artifact_name: matvtool
            asset_name: matvtool-linux-amd64
            sed: 'sed'
          -
            os: 'windows-2019'
            artifact_name: matvtool.exe
            asset_name: matvtool-windows-amd64.exe
            sed: 'sed'
          -
            os: 'macos-11'
            artifact_name: matvtool
            asset_name: matvtool-macos-amd64
            sed: 'gsed'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Poetry
        shell: bash
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install gsed for macOS
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew install gnu-sed

      - name: Replace Version
        shell: bash
        run: |
          ${{ matrix.sed }} -i "s/__VERSION__ = \"0.0.0\"/__VERSION__ = \"${{ env.VERSION }}\"/" aoirint_matvtool/__init__.py
          ${{ matrix.sed }} -i "s/version = \"0.0.0\"/version = \"${{ env.VERSION }}\"/" pyproject.toml

      - name: Install Dependencies
        shell: bash
        run: poetry install

      - name: Build Binary
        run: |
          poetry run pyinstaller --name matvtool --onefile aoirint_matvtool/scripts/cli.py
      
      - name: Upload Binary to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
